(function(window, angular, undefined) {
  "use-strict";

  angular.module("ATS.SharedServices", ['ngCookies', 'firebase']);

 })(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  var firebase = new Firebase("https://sweltering-torch-73.firebaseio.com/");

  angular.module("ATS.SharedServices").service('FirebaseService', ['$q', '$cookieStore', '$firebaseObject', function($q, $cookieStore, $firebaseObject) {
    
    this.checkIfRoomExists = function(roomId) {
      var deferred = $q.defer();

      firebase.child('rooms').child(roomId).once('value', function(snapshot) {
        exists = (snapshot.val() !== null);
        deferred.resolve(exists);
      });

      return deferred.promise;
    };

    this.destroyRoom = function(roomId) {
      firebase.child('rooms').child(roomId).remove();
    };

    this.destroyUser = function(roomId, userId) {
      firebase.child('rooms').child(roomId).child('users').child(userId).remove();
    };

    this.generateRoomId = function() {
      return Math.floor((Math.random() * 99900000) + 100000).toString();
    };

    this.generateUserId = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
      });
    };

    this.getRoom = function(roomId) {
      var ref = firebase.child('rooms').child(roomId);
      return $firebaseObject(ref);
    };

    this.getUser = function(roomId, uuid) {
      var ref = firebase.child('rooms').child(roomId).child('users').child(uuid);
      return $firebaseObject(ref);
    };

    this.newRoom = function(roomId, deckIndex) {
      var room = $firebaseObject(firebase.child('rooms').child(roomId));
      var customDeck = $cookieStore.get("deck");
      if (!customDeck) {
        customDeck = {
          name: "Custom Deck",
          type: "nominal",
          cards: []
        };
      }
      angular.extend(room, {
        customDeck: customDeck,
        deckIndex: deckIndex,
        reveal: false,
        updatedAt: Firebase.ServerValue.TIMESTAMP
      });
      room.$save();
    };

    this.newUser = function(roomId, uuid, leader) {
      var user = $firebaseObject(firebase.child('rooms').child(roomId).child('users').child(uuid));
      angular.extend(user, {
        leader: leader,
        vote: null,
        voter: true
      });
      user.$save();
    };
  }]);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS.Landing', ['ATS.SharedServices']);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS.Landing').controller("LandingController", ["$rootScope", "$scope", "$location", "$firebase", "FirebaseService", function($rootScope, $scope, $location, $firebase, FirebaseService) {
      
    $scope.joinRoom = function() {
      $location.path("/"+$scope.roomId);
    };

    $scope.newRoom = function() {
      var newRoomId = FirebaseService.generateRoomId();
      var defaultDeckIndex = 0;
      FirebaseService.newRoom(newRoomId, defaultDeckIndex);
      var uuid = FirebaseService.generateUserId();
      var leader = true;
      FirebaseService.newUser(newRoomId, uuid, leader);
      $rootScope.uuid = uuid;
      $location.path("/"+newRoomId);
    };
  }]);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS.Room', ['ATS.SharedServices']);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  angular.module("ATS.Room").service('ResultsService', function() {
    
    this.calculateVoteCompletion = function(users) {
      var voteCount = 0;
      var voterCount = 0;

      angular.forEach(users, function(user, key) {
        if (user.voter) {
          voterCount++;
          if (user.vote) {
            voteCount++;
          }
        }
      });

      if (voterCount) {
        return voteCount * 100 / voterCount;
      } else {
        return 0;
      }
    };

    this.getConsensusLevel = function(bestGuesses, consensusPercentage) {
      if (bestGuesses.length !== 1) {
        return "Tie";
      } else if (consensusPercentage === 1) {
        return "Unanimous";
      } else if (consensusPercentage >= 0.75) {
        return "Consensus";
      } else if (consensusPercentage >= 0.5) {
        return "Majority";
      } else {
        return "Plurality";
      }
    };

    this.getMedianVote = function(users) {
      var voteMap = this.mapVotesOrdinal(users);
      if (voteMap.length === 0) {
        return [];
      } else if (voteMap.length % 2 === 0) {
        return [voteMap[voteMap.length/2]];
      } else {
        return [voteMap[Math.floor(voteMap.length/2)]];
      }
    };

    this.getResults =function(users, deck) {
      if (deck.type === "ordinal") {
        return this.getResultsOrdinal(users);
      } else {
        return this.getResultsNominal(users);
      }
    };

    this.getResultsNominal = function(users) {
      var voteMap = this.mapVotesNominal(users);
      var totalVotes = 0;
      var bestGuesses = [];
      var max = 0;

      angular.forEach(voteMap, function(voteObj, vote) {
        totalVotes += voteObj.count;
        if (voteObj.count > max) {
          bestGuesses = [voteObj.card];
          max = voteObj.count;
        } else if (voteObj.count === max) {
          bestGuesses.push(voteObj.card);
        }
      });

      return {
        consensusLevel: this.getConsensusLevel(bestGuesses, max/totalVotes),
        cards: bestGuesses
      };
    };

    this.getResultsOrdinal = function(users) {
      return {
        consensusLevel: "Best Guess (Median)",
        cards: this.getMedianVote(users)
      };
    };

    this.mapVotesNominal = function(users) {
      var voteMap = {};

      angular.forEach(users, function(user, key) {
        if (user.vote) {
          if (voteMap[user.vote.text]) {
            voteMap[user.vote.text].count++;
          } else {
            voteMap[user.vote.text] = {
              card: user.vote,
              count: 1
            };
          }
        }
      });

      return voteMap;
    };

    this.mapVotesOrdinal =  function(users) {
      var voteMap = [];

      angular.forEach(users, function(user, key) {
        if (user.vote && user.vote.val >= 0) {
          voteMap.push(user.vote);
        }
      });

      voteMap.sort(function(a, b) {
        if (a.val <= b.val) {
          return -1;
        } else {
          return 1;
        }
      });

      return voteMap;
    };
  });

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

	angular.module("ATS.Room").factory("DeckFactory", function() {
		return {
			getDecks: function() {
				return [
			    {
			      name: "Mountain Goat",
			      type: "ordinal",
			      cards: [
			        {
			          text: "0",
			          val: 0
			        },
			        {
			          text: ".5",
			          val: 0.5
			        },
			        {
			          text: "1",
			          val: 1
			        },
			        {
			          text: "2",
			          val: 2
			        },
			        {
			          text: "3",
			          val: 3
			        },
			        {
			          text: "5",
			          val: 5
			        },
			        {
			          text: "8",
			          val: 8
			        },
			        {
			          text: "13",
			          val: 13
			        },
			        {
			          text: "20",
			          val: 20
			        },
			        {
			          text: "40",
			          val: 40
			        },
			        {
			          text: "100",
			          val: 100
			        },
			        {
			          text: "?",
			          val: -1
			        },
			        {
			          text: "coffee",
			          val: -2,
			          fa: "coffee"
			        }
			      ]
			    },
			    {
			      name: "Fibonacci",
			      type: "ordinal",
			      cards: [
			        {
			          text: "0",
			          val: 0
			        },
			        {
			          text: "1",
			          val: 1
			        },
			        {
			          text: "2",
			          val: 2
			        },
			        {
			          text: "3",
			          val: 3
			        },
			        {
			          text: "5",
			          val: 5
			        },
			        {
			          text: "8",
			          val: 8
			        },
			        {
			          text: "13",
			          val: 13
			        },
			        {
			          text: "21",
			          val: 21
			        },
			        {
			          text: "34",
			          val: 34
			        },
			        {
			          text: "55",
			          val: 55
			        },
			        {
			          text: "89",
			          val: 89
			        },
			        {
			          text: "?",
			          val: -1
			        },
			        {
			          text: "coffee",
			          val: -2,
			          fa: "coffee"
			        }
			      ]
			    },
			    {
			      name: "Sequential",
			      type: "ordinal",
			      cards: [
			        {
			          text: "0",
			          val: 0
			        },
			        {
			          text: "1",
			          val: 1
			        },
			        {
			          text: "2",
			          val: 2
			        },
			        {
			          text: "3",
			          val: 3
			        },
			        {
			          text: "4",
			          val: 4
			        },
			        {
			          text: "5",
			          val: 5
			        },
			        {
			          text: "6",
			          val: 6
			        },
			        {
			          text: "7",
			          val: 7
			        },
			        {
			          text: "8",
			          val: 8
			        },
			        {
			          text: "9",
			          val: 9
			        },
			        {
			          text: "10",
			          val: 10
			        },
			        {
			          text: "?",
			          val: -1
			        },
			        {
			          text: "coffee",
			          val: -2,
			          fa: "coffee"
			        }
			      ]
			    },
			    {
			      name: "T-Shirt",
			      type: "ordinal",
			      cards: [
			        {
			          text: "XS",
			          val: 1
			        },
			        {
			          text: "S",
			          val: 2
			        },
			        {
			          text: "M",
			          val: 3
			        },
			        {
			          text: "L",
			          val: 4
			        },
			        {
			          text: "XL",
			          val: 5
			        },
			        {
			          text: "?",
			          val: -1
			        },
			        {
			          text: "coffee",
			          val: -2,
			          fa: "coffee"
			        }
			      ]
			    }
			  ];
			}
		};
	});
})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  var MAX_CARDS = 15;

  angular.module('ATS.Room').controller('DeckController', ['$scope', "$mdDialog", 'deck', function($scope, $mdDialog, deck) {
      
      $scope.deck = deck;
      
      $scope.addCard = function() {
        $scope.deck.cards = $scope.deck.cards || [];
        if ($scope.deck.cards.length < MAX_CARDS) {
          $scope.deck.cards.push({
            text: "NewCard" + ($scope.deck.cards.length + 1).toString(),
            val: -1,
            fa: ""
          });
        }
      };

      $scope.canAddCard = function() {
        return !$scope.deck.cards || $scope.deck.cards.length < MAX_CARDS;
      };

      $scope.cancel = function() {
        $mdDialog.cancel();
      };

      $scope.hasCards = function() {
        return $scope.deck.cards && $scope.deck.cards.length > 0;
      };

      $scope.remove = function(card) {
        var index = $scope.deck.cards.indexOf(card);
        $scope.deck.cards.splice(index, 1);
      };

      $scope.save = function() {
        $mdDialog.hide(polishDeck($scope.deck));
      };

      function polishDeck(deck) {
        var cards = [];
        angular.forEach(deck.cards, function(value, key) {
          cards.push({
            text: value.text,
            val: angular.isNumber(value.text) ? Float.valueOf(value.text) : key,
            fa: ""
          });
        });
        deck.cards = cards;
        return deck;
      }
  }]);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  var firebase = new Firebase("https://sweltering-torch-73.firebaseio.com/");

  angular.module("ATS.Room").controller("RoomController", ["$rootScope", "$scope", "$routeParams", "$location", "$cookieStore", "FirebaseService", "ResultsService", "DeckFactory", "$mdDialog", function($rootScope, $scope, $routeParams, $location, $cookieStore, FirebaseService, ResultsService, DeckFactory, $mdDialog) {

    $scope.changeDeck = function() {
      resetVotes();
      $scope.room.updatedAt = Firebase.ServerValue.TIMESTAMP;
      $scope.room.$save();
    };

    $scope.chooseCard = function(cardVal, cardText, cardFA) {
      if ($scope.user.voter) {
        if ($scope.user.vote && $scope.user.vote.val === cardVal) {
          $scope.user.vote = null;
        } else {
          $scope.user.vote = {
            val: cardVal,
            text: cardText,
            fa: cardFA || "" 
          };
        }
        $scope.user.$save();
      }
    };

    $scope.deckIsEmpty = function() {
      return ! $scope.selectedDeck || !$scope.selectedDeck.cards || $scope.selectedDeck.cards.length === 0;
    };

    $scope.editDeck = function(ev) {
      document.getElementById("edit").blur();
      $mdDialog.show({
        controller: 'DeckController',
        clickOutsideToClose: false,
        escapeToClose: false,
        locals: {
          deck: angular.copy($scope.room.customDeck)
        },
        templateUrl: 'modules/room/deck-editor.html',
        targetEvent: ev,
        onComplete: function(){ document.getElementById("name").focus(); }
      }).then(function(deck) {
        resetVotes();
        $scope.room.customDeck = deck;
        $scope.selectedDeck = deck;
        $scope.room.updatedAt = Firebase.ServerValue.TIMESTAMP;
        $scope.room.$save().then(function() {
          $cookieStore.put("deck", deck);
        });
      });
    };

    $scope.reset = function() {
      resetVotes();
      $scope.room.updatedAt = Firebase.ServerValue.TIMESTAMP;
      $scope.room.$save();
      document.getElementById("reset").blur();
    };

    $scope.reveal = function() {
      $scope.room.results = ResultsService.getResults($scope.room.users, $scope.selectedDeck);
      $scope.room.reveal = true;
      $scope.room.updatedAt = Firebase.ServerValue.TIMESTAMP;
      $scope.room.$save();
      document.getElementById("reveal").blur();
    };

    $scope.share = function() {
      document.getElementById("share").blur();
      window.prompt("Invite others to the room by sharing this link:", window.location);
    };

    $scope.toggleVoter = function() {
      $scope.user.$save();
    };

    $scope.$watch("room.customDeck", function() {
      if ($scope.room.deckIndex === -1) {
        $scope.selectedDeck = $scope.room.customDeck;
      }
    });

    $scope.$watch("room.deckIndex", function() {
      var index = $scope.room.deckIndex;
      if (index === -1) {
        $scope.selectedDeck = $scope.room.customDeck;
      } else {
        $scope.selectedDeck = $scope.cardDecks[index];
      }
    });

    $scope.$watch("room.users", function() {
      $scope.voteCompletion = ResultsService.calculateVoteCompletion($scope.room.users);
    });

    var roomId = $routeParams.roomId;
    var uuid = $rootScope.uuid;
    FirebaseService.checkIfRoomExists(roomId).then(function(exists) {
      if (exists) {
        $scope.room = FirebaseService.getRoom(roomId);
        if (!uuid) {
          uuid = FirebaseService.generateUserId();
          var leader = false;
          FirebaseService.newUser(roomId, uuid, leader);
        } 
        $scope.user = FirebaseService.getUser(roomId, uuid);
        $scope.cardDecks = DeckFactory.getDecks();
        $scope.selectedDeckIndex = 0;
        $scope.voteCompletion = 0;
        $scope.selectedDeck = $scope.cardDecks[$scope.selectedDeckIndex].cards;
      } else {
        $location.path("/");
      }
    });

    function resetVotes() {
      for (var user in $scope.room.users) {
        $scope.room.users[user].vote = null;
      }
      $scope.room.reveal = false;
      $scope.room.results = null;
    }

    function tearDown() {
      if ($scope.user.leader) {
        FirebaseService.destroyRoom($scope.room.$id);
      } else {
        FirebaseService.destroyUser($scope.room.$id, $scope.user.$id);
      }
      $rootScope.uuid = null;
    }

    $scope.$on('$locationChangeStart', function(event, newUrl, oldUrl) {
      tearDown();
    });

    window.onbeforeunload = function (event) {
      tearDown();

    };

    $scope.$on('$destroy', function() {
      delete window.onbeforeunload;
    });
  }]);

})(window, window.angular);
(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS.Contributor', []);

})(window, window.angular);

(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS.Contributor').controller("ContributorController",
    ["$scope", "$location","ContributorFactory", "SupporterFactory", function($scope, $location, ContributorFactory, SupporterFactory) {
      $scope.contributors = ContributorFactory.getContributors();
      $scope.supporters = SupporterFactory.getSupporters();
  }]);
})(window, window.angular);

(function(window, angular, undefined) {
  "use-strict";

  angular.module("ATS.Contributor").factory("ContributorFactory", function() {
    return{
      getContributors: function(){
        return [
          {
            name: "Ty Thorsen",
            phone: "320-111-2222",
            email: "Ty@thorsen.com",
            body: "Ty is a developer who lorem ipsum blah blah blah",
            gravatarHash: "cb9c4449fcde114a5af7cd45af4b0442", 
            linkedIn: "https://www.linkedin.com/in/tythorsen", 
            gitHub: "https://github.com/thorsenty"
          },
          {
            name: "Alex Ulrich",
            phone: "320-123-4455",
            email: "Alex@ulrich.com",
            body: "Alex is a developer who lorem ipsum blah blah blah. Alex is a developer who lorem ipsum blah blah blah. ",
            gravatarHash: "b209d86e109ef4fa78feb893fe4ed6be",
            linkedIn: "https://www.linkedin.com/in/alexulrich", 
            gitHub: "https://github.com/AlexUlrich"
          }, 
          {
            name: "Zach Jergenson",
            phone: "320-333-9144",
            email: "Zbjergie@gmail.com",
            body: "Zach is a developer who lorem ipsum blah blah blah",
            gravatarHash: "2d80e7afa88702ff33128c53d84c79ca",
            linkedIn: "https://www.linkedin.com/pub/zach-jergenson/99/687/533", 
            gitHub: "https://github.com/ZachJergenson"
          }
        ];
      }
    };
  });
})(window, window.angular);

(function(window, angular, undefined) {
  "use-strict";

  angular.module("ATS.Contributor").factory("SupporterFactory", function() {
    return{
      getSupporters: function(){
        return [
          {
           name: "Atlassian",
           image: "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQ7EG0CX8uIkrUXOo1yAv5lL5gqv4EsZU6ncDzGJx-JJzMWH7pXf-VtogJ3",
           body: "Atlassian gave us a free Jira instance. Pretty cool of them, huh?"
          },
          {
           name: "Github",
           image: "http://www.fastly.com/img/customers/casestudy/github_logo.png",
           body: "Github's hosting our site for free. That's also really cool."
          }
        ];
      }
    };
  });
})(window, window.angular);

(function(window, angular, undefined) {
  "use-strict";

  angular.module('ATS', ['ngRoute', 'ngMaterial', 'ATS.Landing', 'ATS.Room', 'ATS.Contributor'])

  	.config(["$mdThemingProvider", function($mdThemingProvider) {
    $mdThemingProvider.theme('default')
      .primaryPalette('blue')
      .accentPalette('grey');
  	}])

  	.config(['$routeProvider', function($routeProvider) {
    $routeProvider
      .when('/', {
        controller: 'LandingController',
        templateUrl: 'modules/landing/landing.html'
      })
      .when('/contributors', {
        controller: 'ContributorController',
        templateUrl: 'modules/contributor/contributor.html'
      })
      .when('/:roomId/', {
        controller: 'RoomController',
        templateUrl: 'modules/room/room.html'
      })
      .otherwise({
        redirectTo: '/'
      });
  	}]);

})(window, window.angular);
